user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

##############################################################
#                          HTTP
##############################################################

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format    main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
  access_log    /var/log/nginx/access.log  main;

##############################################################
#                          Security
##############################################################

  server_tokens off;

##############################################################
#                          Optimizations
##############################################################
  
  # keepalive_timeout and keepalive_requests control the keep alive settings.
  keepalive_timeout   65;
  keepalive_requests  100000;

  # sendfile optimizes serving static files from the file system, like logos.
  sendfile off;

  # tcp_nodelay allows nginx to make TCP send multiple buffers as individual packets.
  tcp_nodelay on;

# tcp_nopush optimizes the amount of data sent down the wire at once by activating
# the TCP_CORK option within the TCP stack. TCP_CORK blocks the data until the packet
# reaches the MSS, which is equal to the MTU minus the 40 or 60 bytes of the IP header.
  tcp_nopush on;


# client_body_buffer_size handles the client buffer size. Most client buffers are coming
# from POST method form submissions. 128k is normally a good choice for this setting
  client_body_buffer_size 128k;

# client_max_body_size sets the max body buffer size. If the size in a request exceeds
# the configured value, the 413 (Request Entity Too Large) error is returned to the client.
# For reference, browsers cannot correctly display 413 errors. Setting size to 0 disables
# checking of client request body size.
  client_max_body_size         10m;

# client_header_buffer_size handles the client header size. 1k is usually a sane choice for this by default.
  client_header_buffer_size    1k;

# large_client_header_buffers shows the maximum number and size of buffers for large client headers. 4 headers
# with 4k buffers should be sufficient here.
  large_client_header_buffers  4 4k;

# output_buffers sets the number and size of the buffers used for reading a response from a disk. If possible,
# the transmission of client data will be postponed until nginx has at least the set size of bytes of data to
# send. The zero value disables postponing data transmission.
  output_buffers  1 32k;

  postpone_output 1460;

  client_header_timeout  3m;
  client_body_timeout    3m;
  send_timeout           3m;

  # caching static assets
  # open_file_cache           max=1000 inactive=20s;
  # open_file_cache_valid     30s;
  # open_file_cache_min_uses  5;
  # open_file_cache_errors    off;

##############################################################
#                         Server Config
##############################################################

  server {
    listen      80;
    server_name dramabomb.io  www.dramabomb.io;

    root        /var/www/drama-bomb/server/build;

    if ($http_user_agent ~* badbot) {
      return 403;
    }

    if ($http_referer ~* badbot) {
      return 403;
    }

    location / {
      try_files $uri $uri/ /index.html;
    }

    location /api/ {
      proxy_http_version          1.1;
      proxy_cache_bypass          $http_upgrade;
      chunked_transfer_encoding   off;

      proxy_set_header      X-Real-IP       $remote_addr;
      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header      Host            $http_host;
      proxy_set_header      X-NginX-Proxy   true;
      # Eventsource
      proxy_set_header      Connection '';
      proxy_set_header      X-Accel-Buffering no;

      proxy_pass            http://localhost:8080/;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }

  }
  # include /etc/nginx/conf.d/*.conf;
}
